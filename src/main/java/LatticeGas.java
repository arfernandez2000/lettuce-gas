import models.Cell;

public class LatticeGas {
    static Cell[][] cells = new Cell[10][10];

    public static void main(String[] args) {
        for (int i = 0; i < cells.length; i++) {
            for (int j = 0; j < cells[i].length; j++) {
                cells[i][j] = new Cell(false);
            }
        }
        cells[9][0].createParticle(0);
        cells[8][2].createParticle(0);
        cells[8][1].createParticle(0);
        cells[6][5].createParticle(0);
        cells[5][5].createParticle(0);
        printCells(cells);
        while (true) {
            for (int i = 0; i < cells.length; i++) {
                for (int j = 0; j < cells[i].length; j++) {
                    cells[i][j].setDirections(cells[i][j].getNewDirections());
                    boolean[] inDirections = collectDirections(i, j, i % 2 != 0);
                    boolean[] outDirections = evaluate(inDirections, cells[i][j]);
                    cells[i][j].setNewDirections(outDirections);
                }
            }
        }
    }

    //i -> par: (i - 1, j) B, (i + 1, j) E, (i, j + 1) F, (i - 1, j + 1) A, (i, j - 1) D, (i - 1, j - 1) C
    //i -> impar: (i - 1, j) B , (i + 1, j) E, (i, j + 1) A, (i + 1, j + 1) F, (i, j - 1) C, (i + 1, j - 1) D
    static boolean[] collectDirections(int i, int j, boolean isOdd) {
        boolean[] directions = new boolean[6];
        directions[4] = checkNeighbour(i - 1, j, 1);
        directions[1] = checkNeighbour(i + 1, j, 4);
        if (isOdd) {
            directions[3] = checkNeighbour(i, j + 1, 0);
            directions[2] = checkNeighbour(i + 1, j + 1, 5);
            directions[5] = checkNeighbour(i, j - 1, 2);
            directions[0] = checkNeighbour(i + 1, j - 1, 3);
        } else {
            directions[2] = checkNeighbour(i, j + 1, 5);
            directions[3] = checkNeighbour(i - 1, j + 1, 0);
            directions[0] = checkNeighbour(i, j - 1, 3);
            directions[5] = checkNeighbour(i - 1, j - 1, 2);
        }

        if (directions[0] || directions[1] || directions[2] || directions[3] || directions[4] || directions[5])
            System.out.println("i: " + i + " j: " + j + " directions: " + directions[0] + " " + directions[1] + " " + directions[2] + " " + directions[3] + " " + directions[4] + " " + directions[5]);

        return directions;
    }

    static boolean checkNeighbour(int i, int j, int index) {
        try {
            return cells[i][j].getDirections()[index];
        } catch (ArrayIndexOutOfBoundsException e) {
            return false;
        }
    }

    static boolean[] evaluate(boolean[] inDirections, Cell cell) {
        boolean[] outDirections = new boolean[6];
        int collisionCount = countCollitions(inDirections);
        // When there are no particles colliding, the particle simply passes through
        if (collisionCount == 1) {
            for (int i = 0; i < outDirections.length; i++) {
                if (inDirections[i]) {
                    outDirections[(i + 3) % 6] = inDirections[i];
                    break;
                }
            }
        }
        // When there are 2 particles colliding, we can shift the inDirections array by 1 or 2 indices, depending
        // on the random value generated by the cell (0 or 1)
        else if (collisionCount == 2) {
            for (int i = 0; i < outDirections.length; i++) {
                outDirections[(i + (int) cell.getRandom() + 1) % 6] = inDirections[i];
            }
        }
        // When there are 3 particles colliding, we can simply invert the inDirections array
        else if (collisionCount == 3) {
            for (int i = 0; i < outDirections.length; i++) {
                outDirections[i] = !inDirections[i];
            }
        }
        // When there are 4 or more particles colliding, nos desconocemos
        else {
            outDirections = inDirections;
        }
        return outDirections;
    }

    private static int countCollitions(boolean[] inDirections) {
        int count = 0;
        for (boolean element : inDirections) {
            if (element) count++;
        }
        return count;
    }

    static void printCells(Cell[][] cells) {
        for (int i = 0; i < cells.length; i++) {
            for (int j = 0; j < cells[i].length; j++) {
                System.out.print(cells[i][j].getDirections()[0] ? "1" : "0");
            }
            System.out.println();
        }
    }
}
